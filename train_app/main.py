import streamlit as st
import pandas as pd
import plotly.express as px
import io

# Fonction pour cr√©er un fichier Excel mod√®le
def generate_empty_template():
    # Noms des colonnes attendues dans l'application
    columns = [
        "Date", "Calories Entra√Ænement", "Temps Entra√Ænement",
        "Calories journali√®res", "Calories Consomm√©es",
        "Proteines consomm√©es", "Glucides consomm√©es",
        "Lipides consomm√©es", "D√©ficit Calorique"
    ]
    
    # Cr√©e un DataFrame vide avec les colonnes n√©cessaires
    empty_df = pd.DataFrame(columns=columns)
    
    # Sauvegarde dans un buffer m√©moire pour t√©l√©chargement
    buffer = io.BytesIO()
    with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
        empty_df.to_excel(writer, index=False, sheet_name="Mod√®le")
    
    buffer.seek(0)
    return buffer

# Configuration de la page
st.set_page_config(
    page_title="FitTrack App",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Ajout dans le menu pour le t√©l√©chargement
with st.sidebar:
    st.subheader("üì• T√©l√©charger un Mod√®le Excel")
    st.markdown(
        "T√©l√©chargez un fichier Excel mod√®le contenant les colonnes n√©cessaires pour soumettre vos donn√©es."
    )
    
    # G√©n√©ration et t√©l√©chargement du fichier
    template_file = generate_empty_template()
    st.download_button(
        label="T√©l√©charger le mod√®le",
        data=template_file,
        file_name="modele_donnees.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

# Barre lat√©rale
st.sidebar.title("üìä Tableau de Bord")
st.sidebar.info("T√©l√©versez vos donn√©es pour commencer.")
uploaded_file = st.sidebar.file_uploader("T√©l√©versez le fichier Excel", type=["xlsx", "xls"])
# Ajout d'un champ pour d√©finir le poids cible
st.sidebar.subheader("üîß Ajustez vos param√®tres")
poids_cible = st.sidebar.number_input("Entrez votre poids cible (kg)", min_value=0.0, value=70.0, step=0.5)


# Tableau de bord
st.title("FitTrack App")

if uploaded_file:
    try:
        # Lecture du fichier Excel
        data = pd.read_excel(uploaded_file)

        # Pr√©-traitement des donn√©es
        data = data[["Date", "Calories Entra√Ænement", "Temps Entra√Ænement", "Calories journali√®res", 
                     "Calories Consomm√©es", "Proteines consomm√©es", "Glucides consomm√©es", "Lipides consomm√©es"]]

        data["Date"] = pd.to_datetime(data["Date"], errors="coerce")
        for col in ["Calories Entra√Ænement", "Temps Entra√Ænement", "Calories journali√®res", 
                    "Calories Consomm√©es", "Proteines consomm√©es", "Glucides consomm√©es", "Lipides consomm√©es"]:
            data[col] = data[col].replace({",": ".", "\xa0": ""}, regex=True).astype(float)

        data = data.dropna()

        # Calculs suppl√©mentaires
        data["Moyenne Mobile 7 Jours"] = data["Calories journali√®res"].rolling(window=7).mean()
        data["D√©ficit Calorique"] = data["Calories journali√®res"] - data["Calories Consomm√©es"]

        # Calcul du d√©ficit calorique total
        total_deficit = data["D√©ficit Calorique"].sum()

        # Calcul du poids perdu en fonction du d√©ficit calorique
        poids_perdu_lbs = total_deficit / 3500  # 3500 kcal = 1 lb
        poids_perdu_kg = poids_perdu_lbs * 0.453592  # Conversion lbs en kg

        # Ajout dans le tableau de bord principal
        st.markdown("### üí° Poids Potentiellement Perdu")
        col1, col2 = st.columns(2)

        col1.metric("Poids Perdu (lbs)", f"{poids_perdu_lbs:.2f} lbs")
        col2.metric("Poids Perdu (kg)", f"{poids_perdu_kg:.2f} kg")

        # Mise √† jour des donn√©es affich√©es dans le tableau
        data["Poids Perdu (lbs)"] = total_deficit / 3500
        data["Poids Perdu (kg)"] = data["Poids Perdu (lbs)"] * 0.453592

        # Structure des onglets
        tab1, tab2, tab3, tab4 = st.tabs(["üìã Donn√©es", "üìà Visualisations", "üí™ Analyse Avanc√©e", "üîß Ajustements"])

        # Onglet 1 : Donn√©es enrichies
        with tab1:

            # Affichage des m√©triques r√©sum√©es
            st.markdown("### üèÜ Aper√ßu R√©sum√©")
            col1, col2, col3, col4 = st.columns(4)
            
            col1.metric("Total Calories Br√ªl√©es", f"{data['Calories Entra√Ænement'].sum():,.0f} kcal")
            col2.metric("Temps Total d‚ÄôEntra√Ænement", f"{data['Temps Entra√Ænement'].sum():,.0f} minutes")
            col3.metric("D√©ficit Moyen", f"{data['D√©ficit Calorique'].mean():,.1f} kcal")
            col4.metric("Max Calories Journali√®res", f"{data['Calories journali√®res'].max():,.0f} kcal")
            
            st.subheader("üìã Aper√ßu et Statistiques des Donn√©es")
            
            # Affichage des donn√©es sous forme de tableau
            st.dataframe(data, use_container_width=True)
            
            # Calculs statistiques descriptifs
            st.markdown("### üßÆ Statistiques Cl√©s")
            
            stats = {
                "Colonnes": [
                    "Calories Entra√Ænement", "Temps Entra√Ænement", "Calories journali√®res",
                    "Calories Consomm√©es", "Proteines consomm√©es", "Glucides consomm√©es", 
                    "Lipides consomm√©es", "D√©ficit Calorique"
                ]
            }
            
            stats["Moyenne"] = [data[col].mean() for col in stats["Colonnes"]]
            stats["M√©diane"] = [data[col].median() for col in stats["Colonnes"]]
            stats["√âcart-Type"] = [data[col].std() for col in stats["Colonnes"]]
            stats["Valeur Max"] = [data[col].max() for col in stats["Colonnes"]]
            stats["Valeur Min"] = [data[col].min() for col in stats["Colonnes"]]
            
            # Conversion des statistiques en DataFrame
            stats_df = pd.DataFrame(stats)
            st.dataframe(stats_df, use_container_width=True)

            
            # Analyses compl√©mentaires
            st.markdown("### üîç Points Int√©ressants")
            
            col5, col6 = st.columns(2)
            
            with col5:
                st.write("**Top 5 Jours avec le Plus Grand D√©ficit Calorique :**")
                top_deficit_days = data.nlargest(5, "D√©ficit Calorique")[["Date", "D√©ficit Calorique"]]
                st.dataframe(top_deficit_days)
                
            with col6:
                st.write("**Top 5 Jours avec le Plus Petit D√©ficit Calorique :**")
                low_deficit_days = data.nsmallest(5, "D√©ficit Calorique")[["Date", "D√©ficit Calorique"]]
                st.dataframe(low_deficit_days)
            
            # Distribution des variables principales
            st.markdown("### üìä Distribution des Donn√©es")
            col7, col8 = st.columns(2)
            
            with col7:
                fig10 = px.histogram(data, x="Calories journali√®res", nbins=30, 
                                    title="Distribution des Calories Journali√®res",
                                    labels={"Calories journali√®res": "Calories (kcal)"})
                st.plotly_chart(fig10, use_container_width=True)
            
            with col8:
                fig11 = px.box(data, y="D√©ficit Calorique", 
                            title="Distribution du D√©ficit Calorique",
                            labels={"D√©ficit Calorique": "D√©ficit (kcal)"})
                st.plotly_chart(fig11, use_container_width=True)
            
            # Ajout d'une analyse de tendance
            st.markdown("### üìà Analyse des Tendances")
            
            fig_trend = px.line(data, x="Date", y=["Calories journali√®res", "Calories Consomm√©es"],
                                title="Tendance des Calories : Consomm√©es vs Journali√®res",
                                labels={"Date": "Date", "value": "Calories (kcal)"})
            st.plotly_chart(fig_trend, use_container_width=True)
        
        # Onglet 2 : Visualisations
        with tab2:
        
            st.subheader("üìà Visualisations")
            col1, col2 = st.columns(2)

            # Graphiques existants
            with col1:
                fig1 = px.scatter(data, x="Temps Entra√Ænement", y="Calories Entra√Ænement",
                                title="Calories br√ªl√©es vs Temps d'entra√Ænement",
                                labels={"Temps Entra√Ænement": "Temps (minutes)", "Calories Entra√Ænement": "Calories br√ªl√©es"})
                st.plotly_chart(fig1, use_container_width=True)

                fig2 = px.line(data, x="Date", y="D√©ficit Calorique",
                            title="√âvolution du D√©ficit Calorique",
                            labels={"Date": "Date", "D√©ficit Calorique": "D√©ficit (kcal)"})
                st.plotly_chart(fig2, use_container_width=True)

            with col2:
                fig3 = px.line(data, x="Date", y=["Calories journali√®res", "Moyenne Mobile 7 Jours"],
                            title="Calories Journali√®res vs Moyenne Mobile",
                            labels={"Date": "Date", "value": "Calories (kcal)"})
                st.plotly_chart(fig3, use_container_width=True)

                fig4 = px.pie(names=["Prot√©ines", "Glucides", "Lipides"],
                            values=[data["Proteines consomm√©es"].mean(),
                                    data["Glucides consomm√©es"].mean(),
                                    data["Lipides consomm√©es"].mean()],
                            title="R√©partition Moyenne des Macronutriments")
                st.plotly_chart(fig4, use_container_width=True)

            # Nouveaux graphiques
            st.markdown("### üìä Graphiques suppl√©mentaires")

            col3, col4 = st.columns(2)

            with col3:
                # Graphique 5 : Histogramme des calories consomm√©es
                fig5 = px.histogram(data, x="Calories Consomm√©es", nbins=20,
                                    title="R√©partition des Calories Consomm√©es",
                                    labels={"Calories Consomm√©es": "Calories (kcal)"})
                st.plotly_chart(fig5, use_container_width=True)

                # Graphique 6 : Boxplot des macronutriments
                fig6 = px.box(data, y=["Proteines consomm√©es", "Glucides consomm√©es", "Lipides consomm√©es"],
                            title="Distribution des Macronutriments",
                            labels={"value": "Valeur (g)", "variable": "Macronutriment"})
                st.plotly_chart(fig6, use_container_width=True)

            with col4:
                # Graphique 7 : √âvolution des prot√©ines consomm√©es
                fig7 = px.line(data, x="Date", y="Proteines consomm√©es",
                            title="√âvolution des Prot√©ines Consomm√©es",
                            labels={"Date": "Date", "Proteines consomm√©es": "Prot√©ines (g)"})
                st.plotly_chart(fig7, use_container_width=True)

                # Graphique 8 : Proportions des macronutriments par jour
                fig8 = px.area(data, x="Date", y=["Proteines consomm√©es", "Glucides consomm√©es", "Lipides consomm√©es"],
                            title="√âvolution des Macronutriments Consomm√©s",
                            labels={"Date": "Date", "value": "Valeur (g)"})
                st.plotly_chart(fig8, use_container_width=True)

            # Graphique 9 : Calories entra√Ænement vs d√©ficit calorique
            fig9 = px.scatter(data, x="Calories Entra√Ænement", y="D√©ficit Calorique",
                            title="Relation entre Calories br√ªl√©es et D√©ficit Calorique",
                            labels={"Calories Entra√Ænement": "Calories br√ªl√©es", "D√©ficit Calorique": "D√©ficit (kcal)"},
                            trendline="ols")
            st.plotly_chart(fig9, use_container_width=True)

            fig1 = px.line(data, x="Date", y="D√©ficit Calorique",
                       title="√âvolution du D√©ficit Calorique",
                       labels={"Date": "Date", "D√©ficit Calorique": "D√©ficit (kcal)"})
            # Ajout de la ligne repr√©sentant le poids cible
            fig1.add_hline(y=poids_cible, line_dash="dot", line_color="red", annotation_text="Poids cible (kg)")
            st.plotly_chart(fig1, use_container_width=True)

            # Graphique 2 : Calories journali√®res vs consomm√©es avec poids cible
            fig2 = px.line(data, x="Date", y=["Calories journali√®res", "Calories Consomm√©es"],
                        title="Tendance des Calories : Journali√®res vs Consomm√©es",
                        labels={"value": "Calories (kcal)", "variable": "Type"})
            # Ajout de la ligne repr√©sentant le poids cible
            fig2.add_hline(y=poids_cible, line_dash="dot", line_color="red", annotation_text="Poids cible (kg)")
            st.plotly_chart(fig2, use_container_width=True)

            # Graphique 3 : R√©partition des macronutriments
            fig3 = px.area(data, x="Date", y=["Proteines consomm√©es", "Glucides consomm√©es", "Lipides consomm√©es"],
                        title="√âvolution des Macronutriments Consomm√©s",
                        labels={"value": "Quantit√© (g)", "variable": "Macronutriment"})
            st.plotly_chart(fig3, use_container_width=True)

            # R√©sum√©
            st.subheader("üí° R√©sum√©")
            st.metric("Poids potentiellement perdu (kg)", f"{poids_perdu_kg:.2f} kg")
            st.metric("Poids cible", f"{poids_cible:.2f} kg")
        ####
        # Onglet 3 : Analyse Avanc√©e
        with tab3:
            
            st.markdown("### Corr√©lations et Analyse")
            corr_matrix = data[["Calories Entra√Ænement", "Temps Entra√Ænement", "Calories journali√®res", "D√©ficit Calorique"]].corr()
            #st.dataframe(corr_matrix)

            fig_corr = px.imshow(corr_matrix, text_auto=True, title="Matrice de Corr√©lation")
            st.plotly_chart(fig_corr, use_container_width=True)

            st.markdown("### R√©partition des D√©ficits")
            fig_hist = px.histogram(data, x="D√©ficit Calorique", nbins=20, title="Histogramme des D√©ficits Caloriques")
            st.plotly_chart(fig_hist, use_container_width=True)

        # Onglet 4 : Ajustements
        with tab4:
            st.subheader("üîß Ajustement Nutritionnel")
            program_type = st.radio("Choisissez un objectif nutritionnel :", ["Bulk", "Cut"])

            if program_type == "Bulk":
                st.markdown("""
                **Programme Bulk :**
                - Augmentez l'apport calorique global pour favoriser la prise de masse.
                - Priorisez les repas riches en prot√©ines et glucides.
                """)
            else:
                st.markdown("""
                **Programme Cut :**
                - R√©duisez l'apport calorique global pour perdre de la masse graisseuse.
                - Maintenez un apport √©lev√© en prot√©ines pour pr√©server la masse musculaire.
                """)

            st.subheader("üèãÔ∏è Programme d‚ÄôEntra√Ænement")
            training_goal = st.selectbox("Objectif d'entra√Ænement :", ["Force", "Endurance", "Hypertrophie"])

            # G√©n√©ration du programme
            def generate_training_program(goal):
                program = {
                    "Lundi": ["Pectoraux", "Triceps"],
                    "Mardi": ["Dos", "Biceps"],
                    "Mercredi": ["Jambes", "Mollets"],
                    "Jeudi": ["√âpaules", "Trap√®zes"],
                    "Vendredi": ["Cardio"],
                }
                st.write(f"### Programme {goal} :")
                for day, activities in program.items():
                    st.write(f"**{day} :** {', '.join(activities)}")

            generate_training_program(training_goal)

    except Exception as e:
        st.error(f"Erreur lors de l'importation des donn√©es : {e}")

else:
    st.info("üì§ T√©l√©versez vos donn√©es pour visualiser votre tableau de bord.")